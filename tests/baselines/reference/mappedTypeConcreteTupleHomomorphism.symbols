=== tests/cases/compiler/mappedTypeConcreteTupleHomomorphism.ts ===
type A = [1, 2]
>A : Symbol(A, Decl(mappedTypeConcreteTupleHomomorphism.ts, 0, 0))

type B = {
>B : Symbol(B, Decl(mappedTypeConcreteTupleHomomorphism.ts, 0, 15))

    [K in keyof A]: `${A[K]}`
>K : Symbol(K, Decl(mappedTypeConcreteTupleHomomorphism.ts, 3, 5))
>A : Symbol(A, Decl(mappedTypeConcreteTupleHomomorphism.ts, 0, 0))
>A : Symbol(A, Decl(mappedTypeConcreteTupleHomomorphism.ts, 0, 0))
>K : Symbol(K, Decl(mappedTypeConcreteTupleHomomorphism.ts, 3, 5))
}

const b: B = ['1', '2']
>b : Symbol(b, Decl(mappedTypeConcreteTupleHomomorphism.ts, 6, 5))
>B : Symbol(B, Decl(mappedTypeConcreteTupleHomomorphism.ts, 0, 15))

type C<T> = {
>C : Symbol(C, Decl(mappedTypeConcreteTupleHomomorphism.ts, 6, 23))
>T : Symbol(T, Decl(mappedTypeConcreteTupleHomomorphism.ts, 8, 7))

    [K in keyof T]: [K, T[K]]
>K : Symbol(K, Decl(mappedTypeConcreteTupleHomomorphism.ts, 9, 5))
>T : Symbol(T, Decl(mappedTypeConcreteTupleHomomorphism.ts, 8, 7))
>K : Symbol(K, Decl(mappedTypeConcreteTupleHomomorphism.ts, 9, 5))
>T : Symbol(T, Decl(mappedTypeConcreteTupleHomomorphism.ts, 8, 7))
>K : Symbol(K, Decl(mappedTypeConcreteTupleHomomorphism.ts, 9, 5))
}

type D = {
>D : Symbol(D, Decl(mappedTypeConcreteTupleHomomorphism.ts, 10, 1))

    [K in keyof C<['c', 'd', 'e']>]: 1
>K : Symbol(K, Decl(mappedTypeConcreteTupleHomomorphism.ts, 13, 5))
>C : Symbol(C, Decl(mappedTypeConcreteTupleHomomorphism.ts, 6, 23))
}

const d: D = [1, 1, 1]
>d : Symbol(d, Decl(mappedTypeConcreteTupleHomomorphism.ts, 16, 5))
>D : Symbol(D, Decl(mappedTypeConcreteTupleHomomorphism.ts, 10, 1))

// repro from #27995
type Foo = ['a', 'b'];
>Foo : Symbol(Foo, Decl(mappedTypeConcreteTupleHomomorphism.ts, 16, 22))

interface Bar {
>Bar : Symbol(Bar, Decl(mappedTypeConcreteTupleHomomorphism.ts, 19, 22))

    a: string;
>a : Symbol(Bar.a, Decl(mappedTypeConcreteTupleHomomorphism.ts, 21, 15))

    b: number;
>b : Symbol(Bar.b, Decl(mappedTypeConcreteTupleHomomorphism.ts, 22, 14))
}

type Baz = { [K in keyof Foo]: Bar[Foo[K]]; };
>Baz : Symbol(Baz, Decl(mappedTypeConcreteTupleHomomorphism.ts, 24, 1))
>K : Symbol(K, Decl(mappedTypeConcreteTupleHomomorphism.ts, 26, 14))
>Foo : Symbol(Foo, Decl(mappedTypeConcreteTupleHomomorphism.ts, 16, 22))
>Bar : Symbol(Bar, Decl(mappedTypeConcreteTupleHomomorphism.ts, 19, 22))
>Foo : Symbol(Foo, Decl(mappedTypeConcreteTupleHomomorphism.ts, 16, 22))
>K : Symbol(K, Decl(mappedTypeConcreteTupleHomomorphism.ts, 26, 14))

